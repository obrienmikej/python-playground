import unittest

# Convert a roman numeral to an ineger
def roman_to_int(s: str) -> int:

    # Dictionary to map each Roman numeral character to its respective integer value
    roman_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    # Handle empty strng case
    if not s:
        raise ValueError("Input string is empty")

    # Initialize variables
    prev_value = 0
    result = 0

    # Iterate over the Roman numberal from the end to the begining
    for char in reversed(s):
        # Get the the integer value of the current roman numeral
        value = roman_dict[char] # uea get()to handle invalid characters
        #value = roman_dict.get[char] # uea get()to handle invalid characters

        # Input validation: Check for invalid characters
        if value is None:
            return None

        # Handle subtractions (special cases)
        if value < prev_value:
            result -= value
        else:
            result += value

        # Update the previous value
        prev_value = value

    return result

# Unit tests for the roman_to_init function
class TestRomanToInt(unittest.TestCase):    

    # Test cases for the roman_to_init function
    def test_roman_to_init(self):

        test_cases = {
            "III": 3,
            "IV": 4,
            "IX": 9,
            "LVIII": 58,
            "MCMXCIV": 1994,
            "MMXXIII": 2023,
            "C": 100,
            "D": 500,
            "M": 1000,
            "XL": 40,
            "XC": 90,
            "CD": 400,
            "CM": 900,
        }

        for roman, expected in test_cases.items():
            with self.subTest(roman=roman):
                self.assertEqual(roman_to_int(roman), expected)

# Run the tests
if __name__ == '__main__':
    unittest.main()