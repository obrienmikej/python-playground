import unittest

# Convert a roman numeral to an ineger
def roman_to_int(s: str) -> int:

    # Dictionary to map each Roman numeral character to its respective integer value
    roman_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    # Handle empty strng case
    if not s:
        return None

    # Initialize variables
    prev_value = 0
    result = 0

    # Iterate over the Roman numberal from the end to the begining
    for char in reversed(s):
        # Get the the integer value of the current roman numeral
        value = roman_dict.get[char] # uea get()to handle invalid characters

        # Input validation: Check for invalid characters
        if value is None:
            return None

        # Handle subtractions (special cases)
        if value < prev_value:
            result -= value
        else:
            result += value

        # Update the previous value
        prev_value = value

    return result

class TestRomanToInt(unittest.TestCase):    

    def test_roman_to_init(self):
        self.assertEqual(roman_to_int("III"), 3)
        self.assertEqual(roman_to_int("IV"), 4)
        self.assertEqual(roman_to_int("IX"), 9)
        self.assertEqual(roman_to_int("LVIII"), 58)
        self.assertEqual(roman_to_int("MCMXCIV"), 1994)
        self.assertEqual(roman_to_int("MMXXIII"), 2023)
        self.assertEqual(roman_to_int("C"), 100)
        self.assertEqual(roman_to_int("D"), 500)
        self.assertEqual(roman_to_int("M"), 1000)
        self.assertEqual(roman_to_int("XL"), 40)
        self.assertEqual(roman_to_int("XC"), 90)
        self.assertEqual(roman_to_int("CD"), 400)
        self.assertEqual(roman_to_int("CM"), 900)        

# Run the tests
if __name__ == '__main__':
    unittest.main()