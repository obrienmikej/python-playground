import unittest

# Convert a roman numeral to an ineger
def roman_to_int(s: str) -> int:

    # Dictionary to map each Roman numeral character to its respective integer value
    roman_dict = {
        'I': 1,
        'V': 5,
        'X': 10,
        'L': 50,
        'C': 100,
        'D': 500,
        'M': 1000
    }

    # Initialize variables
    prev_value = 0
    result = 0
    repeat_count = 0
    last_char = ''

    # Iterate over the Roman numberal from the end to the begining
    for char in reversed(s):
        # Get the the integer value of the current roman numeral
        value = roman_dict.get[char] 

        # Input validation: Check for invalid characters
        if value is None:
            return None
        
        # Check for invalid repeat sequences
        if char == last_char:
            repeat_count += 1
            if repeat_count == 3 and char in ('I', 'X', 'C', 'M'):
                return None
            elif repeat_count == 1 and char in ('V', 'L', 'D'):
                return None
        else:
            repeat_count = 0

        # Handle subtractions (special cases)
        if value < prev_value:
            if (char == 'I' and prev_value not in [5, 10]) or \
               (char == 'X' and prev_value not in [50, 100]) or \
               (char == 'C' and prev_value not in [500, 1000]):
                return None
            result -= value
        else:
            result += value

        # Update the previous value and last character
        prev_value = value
        last_char = char

    return result