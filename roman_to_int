import re
import unittest

def roman_to_int(s: str) -> int:
    # Define Roman numeral values
    roman_dict = {
        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000
    }

    if not s or not isinstance(s, str):
        return 0
    
    # Validate the input for invalid characters or invalid sequences
    if not all(char in roman_dict for char in s) or re.search(r'(IIII|VV|XXXX|LL|CCCC|DD|MMMM|IL|IC|ID|IM|VX|XD|XM|LC|LD|LM|DM)', s):
        return None    

    prev_value = 0
    result = 0

    # Iterate over the Roman numeral from the end to the beginning
    for char in reversed(s):
        value = roman_dict.get(char, 0)  # Use get with default value

        # Handle subtractions (special cases)
        if value < prev_value:
            # Check for valid subtraction combinations
            if (char == 'I' and prev_value in {5, 10}) or \
               (char == 'X' and prev_value in {50, 100}) or \
               (char == 'C' and prev_value in {500, 1000}):
                result -= value
            else:
                return None  # Invalid subtraction combination
        else:
            result += value

        prev_value = value

    return result

class TestRomanToInt(unittest.TestCase):
    def test_valid_roman_numerals(self):
        self.assertEqual(roman_to_int("I"), 1)
        self.assertEqual(roman_to_int("V"), 5)
        self.assertEqual(roman_to_int("X"), 10)
        self.assertEqual(roman_to_int("VI"), 6)
        self.assertEqual(roman_to_int("IV"), 4)
        self.assertEqual(roman_to_int("IX"), 9)
        self.assertEqual(roman_to_int("MMXXIII"), 2023)
        self.assertEqual(roman_to_int("CMXCIX"), 999)
        self.assertEqual(roman_to_int("MCMXCIV"), 1994)
        self.assertEqual(roman_to_int("LXXXIV"), 84)
        self.assertEqual(roman_to_int("CCXLVI"), 246)
        self.assertEqual(roman_to_int("MMMCMXCIX"), 3999)
    
    def test_invalid_roman_numerals(self):
        self.assertIsNone(roman_to_int("A"))
        self.assertIsNone(roman_to_int("IIII"))
        self.assertIsNone(roman_to_int("VV"))
        self.assertIsNone(roman_to_int("IC"))
        self.assertIsNone(roman_to_int("IL"))
        self.assertIsNone(roman_to_int("VX"))
        self.assertIsNone(roman_to_int("CCCC"))
        self.assertIsNone(roman_to_int("XD"))
        self.assertIsNone(roman_to_int("IIIIX"))
        self.assertIsNone(roman_to_int("LC"))
        self.assertIsNone(roman_to_int("DM"))        

    def test_edge_cases(self):
        self.assertEqual(roman_to_int(""), 0)
        self.assertIsNone(roman_to_int(" "))  # Invalid due to space
        self.assertIsNone(roman_to_int("IIIIIIII"))  # Long invalid sequence
        self.assertIsNone(roman_to_int("VVVV"))  # Repeated invalid numeral        

if __name__ == "__main__":
    unittest.main(argv=[''], exit=False)
